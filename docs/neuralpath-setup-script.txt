#!/bin/bash

# CareerGPS Project Setup Script
# This script creates the complete project structure and zips it

echo "🚀 Creating CareerGPS project structure..."

# Create main project directory
mkdir -p careergps
cd careergps

# Create directory structure
echo "📁 Creating directories..."

# Backend directories
mkdir -p backend/{app/{api/v1/endpoints,models,schemas,modules/{roadmap,jobs,interview,learning,analytics},core,workers,utils},alembic/versions,tests}

# Frontend directories
mkdir -p frontend/{app/{dashboard,roadmap/{components,hooks},jobs/components,interview/components,learning/components},components/{ui,layout,shared},lib,hooks,public/{images,fonts}}

# Mobile directories
mkdir -p mobile/{src/{screens,components,navigation,services,utils}}

# Infrastructure directories
mkdir -p infrastructure/{kubernetes/{deployments,services,ingress,configmaps},terraform,scripts}

# Documentation directories
mkdir -p docs

# Scripts directory
mkdir -p scripts

# Create root files
echo "📝 Creating root configuration files..."

cat > README.md << 'EOF'
# CareerGPS - AI-Powered Career Transition Platform

Transform your career from Software Engineer to AI Engineer with personalized roadmaps, smart job matching, and AI interview coaching.

## 🚀 Quick Start

1. Clone the repository
```bash
git clone https://github.com/yourusername/careergps.git
cd careergps
```

2. Run setup script
```bash
chmod +x scripts/setup.sh
./scripts/setup.sh
```

3. Start development servers
```bash
docker-compose up
```

## 📋 Prerequisites

- Docker & Docker Compose
- Node.js 18+
- Python 3.10+
- PostgreSQL 15+
- Redis 7+

## 🏗️ Architecture

- **Frontend**: Next.js 14, TypeScript, Tailwind CSS
- **Backend**: FastAPI, Python, LangChain
- **Database**: PostgreSQL, Redis, Pinecone
- **AI/ML**: OpenAI, HuggingFace, LangChain

## 📖 Documentation

- [API Documentation](docs/API.md)
- [Architecture Guide](docs/ARCHITECTURE.md)
- [Deployment Guide](docs/DEPLOYMENT.md)

## 🤝 Contributing

See [CONTRIBUTING.md](docs/CONTRIBUTING.md) for guidelines.

## 📄 License

MIT License - see LICENSE file
EOF

cat > docker-compose.yml << 'EOF'
version: '3.8'

services:
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000/ws
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/careergps
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - HUME_API_KEY=${HUME_API_KEY}
    volumes:
      - ./backend:/app
    depends_on:
      - db
      - redis
      - vector_db

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.workers.celery_app worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/neuralpath
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379
    depends_on:
      - db
      - redis

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=careergps
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  vector_db:
    image: qdrant/qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
EOF

cat > .env.example << 'EOF'
# Backend
DATABASE_URL=postgresql://postgres:password@localhost:5432/careergps
REDIS_URL=redis://localhost:6379
SECRET_KEY=your-secret-key-here
ENVIRONMENT=development

# AI/ML APIs
OPENAI_API_KEY=sk-...
PINECONE_API_KEY=...
PINECONE_ENVIRONMENT=us-east1-gcp
HUME_API_KEY=...
HUGGINGFACE_API_KEY=...

# AWS (Optional)
AWS_ACCESS_KEY_ID=...
AWS_SECRET_ACCESS_KEY=...
AWS_REGION=us-east-1
S3_BUCKET_NAME=careergps-assets

# Frontend
NEXT_PUBLIC_API_URL=http://localhost:8000
NEXT_PUBLIC_WS_URL=ws://localhost:8000/ws
NEXTAUTH_SECRET=...
NEXTAUTH_URL=http://localhost:3000

# Analytics (Optional)
SENTRY_DSN=...
POSTHOG_API_KEY=...
EOF

cat > .gitignore << 'EOF'
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
ENV/
.venv
pip-log.txt
pip-delete-this-directory.txt
.pytest_cache/
.coverage
htmlcov/
.tox/
.mypy_cache/
.dmypy.json
dmypy.json

# Node
node_modules/
.next/
out/
build/
dist/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# Environment
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE
.vscode/
.idea/
*.swp
*.swo
*~
.DS_Store

# Logs
logs/
*.log

# Docker
.docker/

# Misc
.cache/
temp/
tmp/
EOF

cat > LICENSE << 'EOF'
MIT License

Copyright (c) 2024 CareerGPS

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF

cat > Makefile << 'EOF'
.PHONY: help setup dev test build deploy clean

help:
	@echo "Available commands:"
	@echo "  make setup    - Set up development environment"
	@echo "  make dev      - Start development servers"
	@echo "  make test     - Run all tests"
	@echo "  make build    - Build production images"
	@echo "  make deploy   - Deploy to production"
	@echo "  make clean    - Clean up containers and volumes"

setup:
	./scripts/setup.sh

dev:
	docker-compose up

test:
	./scripts/test.sh

build:
	docker-compose build
	cd frontend && npm run build
	cd backend && python -m build

deploy:
	./infrastructure/scripts/deploy.sh

clean:
	docker-compose down -v
	find . -type d -name "__pycache__" -exec rm -rf {} +
	find . -type f -name "*.pyc" -delete
EOF

# Backend files
echo "🐍 Creating backend files..."

# Create __init__.py files
touch backend/app/__init__.py
touch backend/app/api/__init__.py
touch backend/app/api/v1/__init__.py
touch backend/app/api/v1/endpoints/__init__.py
touch backend/app/models/__init__.py
touch backend/app/schemas/__init__.py
touch backend/app/modules/__init__.py
touch backend/app/modules/roadmap/__init__.py
touch backend/app/modules/jobs/__init__.py
touch backend/app/modules/interview/__init__.py
touch backend/app/modules/learning/__init__.py
touch backend/app/modules/analytics/__init__.py
touch backend/app/core/__init__.py
touch backend/app/workers/__init__.py
touch backend/app/utils/__init__.py
touch backend/tests/__init__.py

cat > backend/requirements.txt << 'EOF'
fastapi==0.104.1
uvicorn[standard]==0.24.0
pydantic==2.5.0
pydantic-settings==2.1.0
sqlalchemy==2.0.23
asyncpg==0.29.0
alembic==1.12.1
python-jose[cryptography]==3.3.0
passlib[bcrypt]==1.7.4
python-multipart==0.0.6
redis==5.0.1
celery==5.3.4
langchain==0.0.340
openai==1.3.5
sentence-transformers==2.2.2
transformers==4.35.2
torch==2.1.1
numpy==1.26.2
pandas==2.1.3
scikit-learn==1.3.2
pinecone-client==2.2.4
boto3==1.29.7
python-dotenv==1.0.0
httpx==0.25.2
websockets==12.0
EOF

cat > backend/requirements-dev.txt << 'EOF'
pytest==7.4.3
pytest-asyncio==0.21.1
pytest-cov==4.1.0
black==23.11.0
flake8==6.1.0
mypy==1.7.1
pre-commit==3.5.0
EOF

cat > backend/Dockerfile << 'EOF'
FROM python:3.10-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Run the application
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
EOF

cat > backend/.env.example << 'EOF'
DATABASE_URL=postgresql://postgres:password@localhost:5432/careergps
REDIS_URL=redis://localhost:6379
SECRET_KEY=your-secret-key-here
OPENAI_API_KEY=sk-...
PINECONE_API_KEY=...
EOF

cat > backend/app/main.py << 'EOF'
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import logging

from app.core.config import settings

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    logger.info("Starting up CareerGPS API...")
    yield
    logger.info("Shutting down...")

app = FastAPI(
    title="CareerGPS API",
    description="AI-powered career transition platform",
    version="1.0.0",
    lifespan=lifespan
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    return {
        "message": "Welcome to CareerGPS API",
        "version": "1.0.0",
        "docs": "/docs"
    }

@app.get("/health")
async def health_check():
    return {"status": "healthy"}
EOF

cat > backend/app/config.py << 'EOF'
from pydantic_settings import BaseSettings
from typing import List

class Settings(BaseSettings):
    APP_NAME: str = "CareerGPS"
    ENVIRONMENT: str = "development"
    DATABASE_URL: str
    REDIS_URL: str
    SECRET_KEY: str
    OPENAI_API_KEY: str
    PINECONE_API_KEY: str = ""
    
    class Config:
        env_file = ".env"

settings = Settings()
EOF

# Frontend files
echo "⚛️ Creating frontend files..."

cat > frontend/package.json << 'EOF'
{
  "name": "careergps-frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "test": "jest",
    "test:watch": "jest --watch"
  },
  "dependencies": {
    "next": "14.0.3",
    "react": "^18",
    "react-dom": "^18",
    "typescript": "^5",
    "@tanstack/react-query": "^5.8.4",
    "axios": "^1.6.2",
    "framer-motion": "^10.16.5",
    "lucide-react": "^0.292.0",
    "tailwindcss": "^3.3.6",
    "zustand": "^4.4.7",
    "next-auth": "^4.24.5",
    "socket.io-client": "^4.5.4",
    "recharts": "^2.9.3",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-slot": "^1.0.2",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.0.0",
    "tailwind-merge": "^2.0.0"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.4.16",
    "postcss": "^8.4.31",
    "eslint": "^8",
    "eslint-config-next": "14.0.3",
    "jest": "^29.7.0",
    "@testing-library/react": "^14.1.2",
    "@testing-library/jest-dom": "^6.1.4"
  }
}
EOF

cat > frontend/tsconfig.json << 'EOF'
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJson